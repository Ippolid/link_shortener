from urllib.parse import urlparse
from dotenv import load_dotenv
import os
from io import BytesIO
import qrcode
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters, CallbackQueryHandler,
)

from datetime import datetime, timedelta
import httpx

load_dotenv()  # take environment variables from .env.

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
TOKEN = os.getenv('TOKEN')
BASE_URL = os.getenv('BASE_URL')

START_CHOICES, REPLY_FOR_CREATE, URL_CHOICES, REPLY_FOR_DELETE, \
REPLY_FOR_CHANGE, ASK_FOR_PERIOD, REPLY_FOR_CHANGE_PERIOD, CHANGE_PERIOD_30, \
URL_EVENTS, DELETE_LINK_YES, QR_CODE, QR_CODE_HIDE = range(12)

create_url_btn = '–°–æ–∑–¥–∞—Ç—å üîó'
delete_url_btn = '–£–¥–∞–ª–∏—Ç—å üóëÔ∏è'
change_url_btn = '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è ‚è±Ô∏è'
to_main_page_btn = '–î–æ–º–æ–π üè†'
expire_date_30_btn = "–ø—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 30 –¥–Ω–µ–π üóìÔ∏è"
generate_qr_code_btn = "QR üì∑"
hide_qr_code_btn = "–°–∫—Ä—ã—Ç—å"

to_main_page_button = [
    [
        InlineKeyboardButton(text=to_main_page_btn, callback_data=str(URL_CHOICES)),
    ]
]
keyboard_to_main_page = InlineKeyboardMarkup(to_main_page_button)

create_button = [
    [
        InlineKeyboardButton(text=create_url_btn, callback_data=str(REPLY_FOR_CREATE)),
    ],
]
create_keyboard = InlineKeyboardMarkup(create_button)

hide_qr_code_button = [
    [
        InlineKeyboardButton(text=hide_qr_code_btn, callback_data=str(QR_CODE_HIDE)),
    ]
]
keyboard_hide_qr_code = InlineKeyboardMarkup(hide_qr_code_button)

urls_buttons = [
    [
        InlineKeyboardButton(text=delete_url_btn, callback_data=str(REPLY_FOR_DELETE)),
        InlineKeyboardButton(text=generate_qr_code_btn, callback_data=str(QR_CODE)),
    ],
    [
        InlineKeyboardButton(text=change_url_btn, callback_data=str(REPLY_FOR_CHANGE)),
        InlineKeyboardButton(text=expire_date_30_btn, callback_data=str(CHANGE_PERIOD_30)),
    ],
    [
        InlineKeyboardButton(text=to_main_page_btn, callback_data=str(URL_CHOICES)),
    ]
]
urls_keyboard = InlineKeyboardMarkup(urls_buttons)


async def return_to_main_page_after_error(update, msg, new=False):
    if new:
        await update.message.reply_text(
            f"{msg}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üò≥",
            reply_markup=keyboard_to_main_page,
        )
    else:
        await update.callback_query.edit_message_text(
            f"{msg}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üò≥",
            reply_markup=keyboard_to_main_page,
        )
    return URL_CHOICES


def days_name_ru(number):
    if number == 1:
        return "–¥–µ–Ω—å"
    elif number in [2, 3, 4]:
        return "–¥–Ω—è"
    return "–¥–Ω–µ–π"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        response = httpx.get(
            f"{BASE_URL}/statistic/{user_id}"
        )
        response.raise_for_status()
    except Exception as ex:
        return await return_to_main_page_after_error(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫", new=True)

    urls = response.json()["links"]
    if urls.keys():
        button_list = []
        for url_short, url_long in urls.items():
            if 'https://' in url_long:
                url_long = url_long[8:38]
            elif 'http://' in url_long:
                url_long = url_long[7:37]
            button_list.append(InlineKeyboardButton(url_long, callback_data=f"url_is_{url_short}"))
        dynamic_buttons = [button_list[i:i + 1] for i in range(0, len(button_list), 1)]
        dynamic_buttons.append(create_button[0])
        urls_keyboard_dynamic = InlineKeyboardMarkup(dynamic_buttons)

        await update.message.reply_text(
            f"–í–∞—à–∏ —Å—Å—ã–ª–∫–∏:",
            reply_markup=urls_keyboard_dynamic,
        )
        return URL_CHOICES

    else:
        await update.message.reply_text(
            "–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Å—ã–ª–æ–∫! üëã",
            reply_markup=create_keyboard,
        )
        return URL_CHOICES


async def create_url_ask(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.effective_message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—Å—ã–ª–∫—É:",
    )
    return REPLY_FOR_CREATE


async def create_url_get(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    old_url = update.message.text
    try:
        result = urlparse(old_url)
        check_domen = '.' in result.netloc
        if not all([result.scheme, result.netloc, check_domen]):
            raise
    except Exception as ex:
        if not result.scheme:
            await update.message.reply_markdown(
                f"–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ ü§î.\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å `https://` –∏–ª–∏ `http://`\n",
                reply_markup=keyboard_to_main_page,
            )
            return REPLY_FOR_CREATE
        elif not result.netloc or not check_domen:
            await update.message.reply_markdown(
                f"–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –¥–æ–º–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å —Å—Å—ã–ª–∫–∏ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ ü§î.\n"
                f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É:\n"
                f"http(s)://domen.ru\n",
                reply_markup=keyboard_to_main_page,
            )
            return REPLY_FOR_CREATE

    try:
        response = httpx.post(
            f"{BASE_URL}/url",
            json={
                "oldurl": old_url,
                "userid": str(user_id),
            }
        )
        response.raise_for_status()
    except Exception as ex:
        return await return_to_main_page_after_error(update, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É")

    short_url = response.json()["shorturl"]
    await update.message.reply_text(
        f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {short_url}",
        reply_markup=keyboard_to_main_page,
    )

    return URL_CHOICES


async def list_of_urls(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["link"] = {}

    user_id = update.effective_user.id

    response = None
    try:
        response = httpx.get(
            f"{BASE_URL}/statistic/{user_id}"
        )
        response.raise_for_status()
    except Exception as ex:
        return await return_to_main_page_after_error(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫")

    urls = response.json()["links"]
    if urls.keys():
        button_list = []
        for url_short, url_long in urls.items():
            if 'https://' in url_long:
                url_long = url_long[8:38]
            elif 'http://' in url_long:
                url_long = url_long[7:37]
            button_list.append(InlineKeyboardButton(url_long, callback_data=f"url_is_{url_short}"))
        dynamic_buttons = [button_list[i:i + 1] for i in range(0, len(button_list), 1)]
        dynamic_buttons.append(create_button[0])
        urls_keyboard_dynamic = InlineKeyboardMarkup(dynamic_buttons)

        await update.callback_query.edit_message_text(
            f"–í–∞—à–∏ —Å—Å—ã–ª–∫–∏:",
            reply_markup=urls_keyboard_dynamic,
        )

    else:
        await update.effective_message.edit_text(
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫",
            reply_markup=create_keyboard,
        )

    return URL_CHOICES


async def url_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    url_id = update.callback_query.data[7:]
    user_id = update.effective_user.id

    response = None
    try:
        response = httpx.get(
            f"{BASE_URL}/statistic/{user_id}/{url_id}"
        )
        response.raise_for_status()
    except Exception as ex:
        return await return_to_main_page_after_error(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å—Å—ã–ª–∫–µ")

    url_info = response.json()
    short_url = f"{BASE_URL}/{url_id}/"
    long_url = url_info['link']
    transfer_count = url_info['transferCount']

    expire_time = datetime.strptime(url_info['expiretime'], '%Y-%m-%dT%H:%M:%SZ')
    get_month_name = ['–Ø–Ω–≤–∞—Ä—è', '–§–µ–≤—Ä–∞–ª—è', '–ú–∞—Ä—Ç–∞', '–ê–ø—Ä–µ–ª—è', '–ú–∞—è', '–ò—é–Ω—è', '–ò—é–ª—è', '–ê–≤–≥—É—Å—Ç–∞', '–°–µ–Ω—Ç—è–±—Ä—è', '–û–∫—Ç—è–±—Ä—è',
                      '–ù–æ—è–±—Ä—è', '–î–µ–∫–∞–±—Ä—è']
    minute = str(expire_time.minute)
    if int(minute) < 10:
        minute = '0' + minute
    expire_time_ru = f"{expire_time.day} {get_month_name[expire_time.month - 1]} {expire_time.year} {expire_time.hour}:{minute}"
    expire_time_delta = (expire_time - datetime.now()).days
    if expire_time_delta == 0:
        expire_info = f"‚ùó–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫–∞–µ—Ç –º–µ–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏ ({expire_time_ru})."
    elif expire_time_delta > 0:
        expire_info = f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {expire_time_delta} {days_name_ru(expire_time_delta)} ({expire_time_ru})."
    else:
        expire_info = "–ó–∞–∫–æ–Ω—á–∏–ª—Å—è —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è"

    await update.callback_query.edit_message_text(
        f"{long_url}\n"
        f"–ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"{short_url}\n"
        f"{expire_info}\n"
        f"–ö–æ–ª-–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {transfer_count}\n",
        reply_markup=urls_keyboard,
    )
    context.user_data["link"] = {
        "short_link_id": url_id,
        "short_link": short_url,
        "long_link": long_url,
        "expire_time": expire_time,
        "transfer_count": transfer_count
    }
    return URL_EVENTS


async def delete_url_ask(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    current_long_link = context.user_data["link"]["long_link"]
    buttons = [
        [
            InlineKeyboardButton(text="–î–∞ üóëÔ∏è", callback_data=str(DELETE_LINK_YES)),
            InlineKeyboardButton(text="–ù–µ—Ç üè†", callback_data=str(URL_CHOICES)),
        ]
    ]
    keyboard = InlineKeyboardMarkup(buttons)

    await update.callback_query.edit_message_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É?\n "
        f"{current_long_link}",
        reply_markup=keyboard,
    )
    return REPLY_FOR_DELETE


async def delete_url(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    current_link_id = context.user_data["link"]['short_link_id']
    user_id = update.effective_user.id
    try:
        response = httpx.delete(
            f"{BASE_URL}/{user_id}/delete/{current_link_id}",
        )
        response.raise_for_status()
    except Exception as ex:
        return await return_to_main_page_after_error(update, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

    await update.callback_query.edit_message_text(
        f"–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ",
        reply_markup=keyboard_to_main_page,
    )
    return URL_CHOICES


async def change_url_ask(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.edit_message_text(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ —á–∞—Å–∞—Ö',
    )
    return REPLY_FOR_CHANGE_PERIOD


async def change_url_period_get(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        expire_delta = update.message.text.split("*")
        if len(expire_delta) == 2:
            expire_delta = int(expire_delta[0]) * int(expire_delta[1])
        elif len(expire_delta) == 1:
            expire_delta = int(expire_delta[0])
        else:
            raise
        assert str(expire_delta).isdigit()
        assert expire_delta > 0
    except Exception as ex:
        await update.message.reply_text(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –∏ –±–æ–ª—å—à–µ 0.\n"
            f"–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
        )
        return REPLY_FOR_CHANGE_PERIOD

    current_link_id = context.user_data["link"]['short_link_id']
    user_id = update.effective_user.id
    try:
        response = httpx.put(
            f"{BASE_URL}/{user_id}/change/{current_link_id}/{expire_delta}",
        )
        response.raise_for_status()
    except Exception as ex:
        return await return_to_main_page_after_error(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è")

    new_expire_time = datetime.now() + timedelta(hours=expire_delta)
    get_month_name = ['–Ø–Ω–≤–∞—Ä—è', '–§–µ–≤—Ä–∞–ª—è', '–ú–∞—Ä—Ç–∞', '–ê–ø—Ä–µ–ª—è', '–ú–∞—è', '–ò—é–Ω—è', '–ò—é–ª—è', '–ê–≤–≥—É—Å—Ç–∞', '–°–µ–Ω—Ç—è–±—Ä—è', '–û–∫—Ç—è–±—Ä—è',
                      '–ù–æ—è–±—Ä—è', '–î–µ–∫–∞–±—Ä—è']
    new_minute = str(new_expire_time.minute)
    if int(new_minute) < 10:
        new_minute = '0' + new_minute
    expire_time_ru = f"{new_expire_time.day} {get_month_name[new_expire_time.month - 1]} {new_expire_time.year} {new_expire_time.hour}:{new_minute}"

    await update.message.reply_text(
        f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ {expire_time_ru}",
        reply_markup=keyboard_to_main_page,
    )
    return URL_CHOICES


async def change_url_period_30(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    expire_delta_to_add = 30 * 24
    current_link_id = context.user_data["link"]['short_link_id']
    user_id = update.effective_user.id
    try:
        expire_delta = (context.user_data["link"]['expire_time'] - datetime.now()).days * 24
        response = httpx.put(
            f"{BASE_URL}/{user_id}/change/{current_link_id}/{expire_delta + expire_delta_to_add}",
        )
        response.raise_for_status()
    except Exception as ex:
        return await return_to_main_page_after_error(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è")

    new_expire_time = datetime.now() + timedelta(hours=expire_delta + expire_delta_to_add)
    get_month_name = ['–Ø–Ω–≤–∞—Ä—è', '–§–µ–≤—Ä–∞–ª—è', '–ú–∞—Ä—Ç–∞', '–ê–ø—Ä–µ–ª—è', '–ú–∞—è', '–ò—é–Ω—è', '–ò—é–ª—è', '–ê–≤–≥—É—Å—Ç–∞', '–°–µ–Ω—Ç—è–±—Ä—è', '–û–∫—Ç—è–±—Ä—è',
                      '–ù–æ—è–±—Ä—è', '–î–µ–∫–∞–±—Ä—è']
    new_minute = str(new_expire_time.minute)
    if int(new_minute) < 10:
        new_minute = '0' + new_minute
    expire_time_ru = f"{new_expire_time.day} {get_month_name[new_expire_time.month - 1]} {new_expire_time.year} {new_expire_time.hour}:{new_minute}"
    await update.callback_query.edit_message_text(
        f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ {expire_time_ru}",
        reply_markup=keyboard_to_main_page,
    )
    return URL_CHOICES


async def generate_qr_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    current_link = context.user_data["link"]['short_link']
    img = qrcode.make(current_link)
    img_in_mem = BytesIO()
    img_in_mem.name = 'qr.png'
    img.save(img_in_mem, 'PNG')
    img_in_mem.seek(0)
    await update.effective_message.reply_photo(
        caption=current_link,
        photo=img_in_mem,
        reply_markup=keyboard_hide_qr_code
    )


async def delete_qr_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.delete()


async def help_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ /start",
    )


def main() -> None:
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(
                filters.TEXT,
                help_start,
            ),
        ],
        states={
            URL_CHOICES: [
                CallbackQueryHandler(url_edit, pattern="^url_is"),
                CallbackQueryHandler(create_url_ask, pattern="^" + str(REPLY_FOR_CREATE) + "$"),
            ],
            REPLY_FOR_CREATE: [
                MessageHandler(
                    filters.TEXT & ~(filters.COMMAND | filters.Regex(f"^({to_main_page_btn})$")),
                    create_url_get,
                ),
            ],
            URL_EVENTS: [
                CallbackQueryHandler(delete_url_ask, pattern="^" + str(REPLY_FOR_DELETE) + "$"),
                CallbackQueryHandler(change_url_ask, pattern="^" + str(REPLY_FOR_CHANGE) + "$"),
                CallbackQueryHandler(change_url_period_30, pattern="^" + str(CHANGE_PERIOD_30) + "$"),
                CallbackQueryHandler(generate_qr_code, pattern="^" + str(QR_CODE) + "$"),
            ],
            REPLY_FOR_DELETE: [
                CallbackQueryHandler(delete_url, pattern="^" + str(DELETE_LINK_YES) + "$"),
            ],
            REPLY_FOR_CHANGE_PERIOD: [
                MessageHandler(
                    filters.TEXT & ~(filters.COMMAND | filters.Regex(f"^({to_main_page_btn})$")),
                    change_url_period_get,
                ),
            ],
        },
        fallbacks=[
            CallbackQueryHandler(list_of_urls, pattern="^" + str(URL_CHOICES) + "$"),
            CallbackQueryHandler(delete_qr_code, pattern="^" + str(QR_CODE_HIDE) + "$"),
        ]
    )

    application.add_handler(conv_handler)

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
